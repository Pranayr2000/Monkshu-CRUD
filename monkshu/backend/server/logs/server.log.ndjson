{"ts":"2021:03:18:14:04:37","level":"info","message":"*************************************"}
{"ts":"2021:03:18:14:04:37","level":"info","message":"*************************************"}
{"ts":"2021:03:18:14:04:37","level":"info","message":"Logging subsystem initialized."}
{"ts":"2021:03:18:14:04:37","level":"info","message":"Initializing the cluster memory."}
{"ts":"2021:03:18:14:04:37","level":"info","message":"Initializing the apps."}
{"ts":"2021:03:18:14:04:37","level":"info","message":"Initializing the API registry."}
{"ts":"2021:03:18:14:04:37","level":"info","message":"Read API registry: {\"/__org_monkshu__release\":\"/apis/release.js\",\"/__org_monkshu__blackboard\":\"/lib/blackboard.js\"}"}
{"ts":"2021:03:18:14:04:37","level":"info","message":"Read App API registry for app sample: {\n    \"/apis/create-user\":\"/apis/createUser.js?needsToken=false&addsToken=sub:access\"\n}\n"}
{"ts":"2021:03:18:14:04:38","level":"info","message":"Initializing the distributed blackboard."}
{"ts":"2021:03:18:14:04:38","level":"info","message":"Initializing the global memory."}
{"ts":"2021:03:18:14:04:38","level":"info","message":"Attaching socket listener on 0.0.0.0:9090"}
{"ts":"2021:03:18:14:04:38","level":"info","message":"Server started on 0.0.0.0:9090"}
{"ts":"2021:03:18:14:10:07","level":"info","message":"Got request for the url: /apis/create-user"}
{"ts":"2021:03:18:14:10:07","level":"error","message":"[stderr] (node:34953) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n (err) => {\n    // This conditional evaluates to true if and only if there was an error\n    // that was not already emitted (which happens when the _write callback\n    // is invoked asynchronously).\n    if (err !== null && !stream._writableState.errorEmitted) {\n      // If there was an error, it will be emitted on `stream` as\n      // an `error` event. Adding a `once` listener will keep that error\n      // from becoming an uncaught exception, but since the handler is\n      // removed after the event, non-console.* writes won't be affected.\n      // we are only adding noop if there is no one else listening for 'error'\n      if (stream.listenerCount('error') === 0) {\n        stream.on('error', noop);\n      }\n    }\n  }"}
{"ts":"2021:03:18:14:10:07","level":"info","message":"Looked up service, calling: /home/abc/Desktop/my_project/monkshu/backend/apps/sample/apis/createUser.js"}
{"ts":"2021:03:18:14:10:07","level":"error","message":"[stderr] (node:34953) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'length' of undefined\n    at Logger.truncate (/home/abc/Desktop/my_project/monkshu/backend/server/lib/log.js:38:51)\n    at Object.server.onReqEnd (/home/abc/Desktop/my_project/monkshu/backend/server/server.js:67:35)\n    at process._tickCallback (internal/process/next_tick.js:68:7)\n (err) => {\n    // This conditional evaluates to true if and only if there was an error\n    // that was not already emitted (which happens when the _write callback\n    // is invoked asynchronously).\n    if (err !== null && !stream._writableState.errorEmitted) {\n      // If there was an error, it will be emitted on `stream` as\n      // an `error` event. Adding a `once` listener will keep that error\n      // from becoming an uncaught exception, but since the handler is\n      // removed after the event, non-console.* writes won't be affected.\n      // we are only adding noop if there is no one else listening for 'error'\n      if (stream.listenerCount('error') === 0) {\n        stream.on('error', noop);\n      }\n    }\n  }"}
{"ts":"2021:03:18:14:10:07","level":"error","message":"[stderr] (node:34953) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\n (err) => {\n    // This conditional evaluates to true if and only if there was an error\n    // that was not already emitted (which happens when the _write callback\n    // is invoked asynchronously).\n    if (err !== null && !stream._writableState.errorEmitted) {\n      // If there was an error, it will be emitted on `stream` as\n      // an `error` event. Adding a `once` listener will keep that error\n      // from becoming an uncaught exception, but since the handler is\n      // removed after the event, non-console.* writes won't be affected.\n      // we are only adding noop if there is no one else listening for 'error'\n      if (stream.listenerCount('error') === 0) {\n        stream.on('error', noop);\n      }\n    }\n  }"}
{"ts":"2021:03:18:14:10:07","level":"error","message":"Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client\n    at Handshake.Sequence._packetToError (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/sequences/Sequence.js:47:14)\n    at Handshake.ErrorPacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/sequences/Handshake.js:123:18)\n    at Protocol._parsePacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:291:23)\n    at Parser._parsePacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Parser.js:433:10)\n    at Parser.write (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Parser.js:43:10)\n    at Protocol.write (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:38:16)\n    at Socket.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/Connection.js:88:28)\n    at Socket.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/Connection.js:526:10)\n    at Socket.emit (events.js:198:13)\n    at addChunk (_stream_readable.js:288:12)\n    --------------------\n    at Protocol._enqueue (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:144:48)\n    at Protocol.handshake (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:51:23)\n    at Connection.connect (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/Connection.js:116:18)\n    at Object.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/apis/createUser.js:15:12)\n    at Module._compile (internal/modules/cjs/loader.js:778:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)\n    at Module.load (internal/modules/cjs/loader.js:653:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:585:3)\n    at Module.require (internal/modules/cjs/loader.js:692:17)"}
{"ts":"2021:03:18:14:10:07","level":"info","message":"[stdout] EXIT ON CRITICAL ERROR!!! Check Logs.\n (err) => {\n    // This conditional evaluates to true if and only if there was an error\n    // that was not already emitted (which happens when the _write callback\n    // is invoked asynchronously).\n    if (err !== null && !stream._writableState.errorEmitted) {\n      // If there was an error, it will be emitted on `stream` as\n      // an `error` event. Adding a `once` listener will keep that error\n      // from becoming an uncaught exception, but since the handler is\n      // removed after the event, non-console.* writes won't be affected.\n      // we are only adding noop if there is no one else listening for 'error'\n      if (stream.listenerCount('error') === 0) {\n        stream.on('error', noop);\n      }\n    }\n  }"}
{"ts":"2021:03:19:16:51:57","level":"info","message":"*************************************"}
{"ts":"2021:03:19:16:51:57","level":"info","message":"*************************************"}
{"ts":"2021:03:19:16:51:57","level":"info","message":"Logging subsystem initialized."}
{"ts":"2021:03:19:16:51:57","level":"info","message":"Initializing the cluster memory."}
{"ts":"2021:03:19:16:51:57","level":"info","message":"Initializing the apps."}
{"ts":"2021:03:19:16:51:57","level":"info","message":"Initializing the API registry."}
{"ts":"2021:03:19:16:51:57","level":"info","message":"Read API registry: {\"/__org_monkshu__release\":\"/apis/release.js\",\"/__org_monkshu__blackboard\":\"/lib/blackboard.js\"}"}
{"ts":"2021:03:19:16:51:57","level":"info","message":"Read App API registry for app sample: {\n    \"/apis/create-user\":\"/apis/createUser.js?needsToken=false&addsToken=sub:access\"\n}\n"}
{"ts":"2021:03:19:16:51:57","level":"info","message":"Initializing the distributed blackboard."}
{"ts":"2021:03:19:16:51:57","level":"info","message":"Initializing the global memory."}
{"ts":"2021:03:19:16:51:57","level":"info","message":"Attaching socket listener on 0.0.0.0:9090"}
{"ts":"2021:03:19:16:51:57","level":"info","message":"Server started on 0.0.0.0:9090"}
{"ts":"2021:03:19:16:52:33","level":"info","message":"Looked up service, calling: /home/abc/Desktop/my_project/monkshu/backend/apps/sample/apis/createUser.js"}
{"ts":"2021:03:19:16:52:33","level":"info","message":"Got request for the url: /apis/create-user"}
{"ts":"2021:03:19:16:52:33","level":"error","message":"[stderr] (node:69171) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n (err) => {\n    // This conditional evaluates to true if and only if there was an error\n    // that was not already emitted (which happens when the _write callback\n    // is invoked asynchronously).\n    if (err !== null && !stream._writableState.errorEmitted) {\n      // If there was an error, it will be emitted on `stream` as\n      // an `error` event. Adding a `once` listener will keep that error\n      // from becoming an uncaught exception, but since the handler is\n      // removed after the event, non-console.* writes won't be affected.\n      // we are only adding noop if there is no one else listening for 'error'\n      if (stream.listenerCount('error') === 0) {\n        stream.on('error', noop);\n      }\n    }\n  }"}
{"ts":"2021:03:19:16:52:33","level":"error","message":"[stderr] (node:69171) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'length' of undefined\n    at Logger.truncate (/home/abc/Desktop/my_project/monkshu/backend/server/lib/log.js:38:51)\n    at Object.server.onReqEnd (/home/abc/Desktop/my_project/monkshu/backend/server/server.js:67:35)\n    at process._tickCallback (internal/process/next_tick.js:68:7)\n (err) => {\n    // This conditional evaluates to true if and only if there was an error\n    // that was not already emitted (which happens when the _write callback\n    // is invoked asynchronously).\n    if (err !== null && !stream._writableState.errorEmitted) {\n      // If there was an error, it will be emitted on `stream` as\n      // an `error` event. Adding a `once` listener will keep that error\n      // from becoming an uncaught exception, but since the handler is\n      // removed after the event, non-console.* writes won't be affected.\n      // we are only adding noop if there is no one else listening for 'error'\n      if (stream.listenerCount('error') === 0) {\n        stream.on('error', noop);\n      }\n    }\n  }"}
{"ts":"2021:03:19:16:52:33","level":"error","message":"[stderr] (node:69171) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\n (err) => {\n    // This conditional evaluates to true if and only if there was an error\n    // that was not already emitted (which happens when the _write callback\n    // is invoked asynchronously).\n    if (err !== null && !stream._writableState.errorEmitted) {\n      // If there was an error, it will be emitted on `stream` as\n      // an `error` event. Adding a `once` listener will keep that error\n      // from becoming an uncaught exception, but since the handler is\n      // removed after the event, non-console.* writes won't be affected.\n      // we are only adding noop if there is no one else listening for 'error'\n      if (stream.listenerCount('error') === 0) {\n        stream.on('error', noop);\n      }\n    }\n  }"}
{"ts":"2021:03:19:16:52:33","level":"error","message":"Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client\n    at Handshake.Sequence._packetToError (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/sequences/Sequence.js:47:14)\n    at Handshake.ErrorPacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/sequences/Handshake.js:123:18)\n    at Protocol._parsePacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:291:23)\n    at Parser._parsePacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Parser.js:433:10)\n    at Parser.write (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Parser.js:43:10)\n    at Protocol.write (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:38:16)\n    at Socket.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/Connection.js:88:28)\n    at Socket.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/Connection.js:526:10)\n    at Socket.emit (events.js:198:13)\n    at addChunk (_stream_readable.js:288:12)\n    --------------------\n    at Protocol._enqueue (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:144:48)\n    at Protocol.handshake (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:51:23)\n    at Connection.connect (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/Connection.js:116:18)\n    at Object.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/apis/createUser.js:15:12)\n    at Module._compile (internal/modules/cjs/loader.js:778:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)\n    at Module.load (internal/modules/cjs/loader.js:653:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:585:3)\n    at Module.require (internal/modules/cjs/loader.js:692:17)"}
{"ts":"2021:03:19:16:52:33","level":"info","message":"[stdout] EXIT ON CRITICAL ERROR!!! Check Logs.\n (err) => {\n    // This conditional evaluates to true if and only if there was an error\n    // that was not already emitted (which happens when the _write callback\n    // is invoked asynchronously).\n    if (err !== null && !stream._writableState.errorEmitted) {\n      // If there was an error, it will be emitted on `stream` as\n      // an `error` event. Adding a `once` listener will keep that error\n      // from becoming an uncaught exception, but since the handler is\n      // removed after the event, non-console.* writes won't be affected.\n      // we are only adding noop if there is no one else listening for 'error'\n      if (stream.listenerCount('error') === 0) {\n        stream.on('error', noop);\n      }\n    }\n  }"}
{"ts":"2021:03:19:17:57:24","level":"info","message":"*************************************"}
{"ts":"2021:03:19:17:57:24","level":"info","message":"*************************************"}
{"ts":"2021:03:19:17:57:24","level":"info","message":"Logging subsystem initialized."}
{"ts":"2021:03:19:17:57:24","level":"info","message":"Initializing the cluster memory."}
{"ts":"2021:03:19:17:57:24","level":"info","message":"Initializing the apps."}
{"ts":"2021:03:19:17:57:24","level":"info","message":"Initializing the API registry."}
{"ts":"2021:03:19:17:57:24","level":"info","message":"Read API registry: {\"/__org_monkshu__release\":\"/apis/release.js\",\"/__org_monkshu__blackboard\":\"/lib/blackboard.js\"}"}
{"ts":"2021:03:19:17:57:24","level":"info","message":"Read App API registry for app sample: {\n    \"/apis/create-user\":\"/apis/createUser.js?needsToken=false&addsToken=sub:access\"\n}\n"}
{"ts":"2021:03:19:17:57:24","level":"info","message":"Initializing the distributed blackboard."}
{"ts":"2021:03:19:17:57:24","level":"info","message":"Initializing the global memory."}
{"ts":"2021:03:19:17:57:24","level":"info","message":"Attaching socket listener on 0.0.0.0:9090"}
{"ts":"2021:03:19:17:57:24","level":"info","message":"Server started on 0.0.0.0:9090"}
{"ts":"2021:03:19:17:57:34","level":"info","message":"Got request for the url: /apis/create-user"}
{"ts":"2021:03:19:17:57:34","level":"info","message":"Looked up service, calling: /home/abc/Desktop/my_project/monkshu/backend/apps/sample/apis/createUser.js"}
{"ts":"2021:03:19:17:57:34","level":"info","message":"[console] User Created ==> false"}
{"ts":"2021:03:19:17:57:46","level":"info","message":"Got request for the url: /apis/create-user"}
{"ts":"2021:03:19:17:57:46","level":"info","message":"Looked up service, calling: /home/abc/Desktop/my_project/monkshu/backend/apps/sample/apis/createUser.js"}
{"ts":"2021:03:19:17:57:46","level":"info","message":"[console] User Created ==> false"}
{"ts":"2021:03:19:17:57:55","level":"info","message":"Got request for the url: /apis/create-user"}
{"ts":"2021:03:19:17:57:55","level":"info","message":"Looked up service, calling: /home/abc/Desktop/my_project/monkshu/backend/apps/sample/apis/createUser.js"}
{"ts":"2021:03:19:17:57:55","level":"info","message":"[console] User Created ==> false"}
{"ts":"2021:03:19:17:57:56","level":"info","message":"Got request for the url: /apis/create-user"}
{"ts":"2021:03:19:17:57:56","level":"info","message":"Looked up service, calling: /home/abc/Desktop/my_project/monkshu/backend/apps/sample/apis/createUser.js"}
{"ts":"2021:03:19:17:57:56","level":"info","message":"[console] User Created ==> false"}
{"ts":"2021:03:19:18:48:30","level":"info","message":"*************************************"}
{"ts":"2021:03:19:18:48:30","level":"info","message":"*************************************"}
{"ts":"2021:03:19:18:48:30","level":"info","message":"Logging subsystem initialized."}
{"ts":"2021:03:19:18:48:30","level":"info","message":"Initializing the cluster memory."}
{"ts":"2021:03:19:18:48:30","level":"info","message":"Initializing the apps."}
{"ts":"2021:03:19:18:48:31","level":"info","message":"Initializing the API registry."}
{"ts":"2021:03:19:18:48:31","level":"info","message":"Read API registry: {\"/__org_monkshu__release\":\"/apis/release.js\",\"/__org_monkshu__blackboard\":\"/lib/blackboard.js\"}"}
{"ts":"2021:03:19:18:48:31","level":"info","message":"Read App API registry for app sample: {\n    \"/apis/create-user\":\"/apis/createUser.js?needsToken=false&addsToken=sub:access\"\n}\n"}
{"ts":"2021:03:19:18:48:31","level":"info","message":"Initializing the distributed blackboard."}
{"ts":"2021:03:19:18:48:31","level":"info","message":"Initializing the global memory."}
{"ts":"2021:03:19:18:48:31","level":"info","message":"Attaching socket listener on 0.0.0.0:9090"}
{"ts":"2021:03:19:18:48:31","level":"info","message":"Server started on 0.0.0.0:9090"}
{"ts":"2021:03:21:21:10:43","level":"info","message":"*************************************"}
{"ts":"2021:03:21:21:10:43","level":"info","message":"*************************************"}
{"ts":"2021:03:21:21:10:43","level":"info","message":"Logging subsystem initialized."}
{"ts":"2021:03:21:21:10:43","level":"info","message":"Initializing the cluster memory."}
{"ts":"2021:03:21:21:10:43","level":"info","message":"Initializing the apps."}
{"ts":"2021:03:21:21:10:43","level":"info","message":"Initializing the API registry."}
{"ts":"2021:03:21:21:10:43","level":"info","message":"Read API registry: {\"/__org_monkshu__release\":\"/apis/release.js\",\"/__org_monkshu__blackboard\":\"/lib/blackboard.js\"}"}
{"ts":"2021:03:21:21:10:43","level":"info","message":"Read App API registry for app sample: {\n    \"/apis/create-user\":\"/apis/createUser.js?needsToken=false&addsToken=sub:access\"\n}\n"}
{"ts":"2021:03:21:21:10:43","level":"info","message":"Initializing the distributed blackboard."}
{"ts":"2021:03:21:21:10:43","level":"info","message":"Initializing the global memory."}
{"ts":"2021:03:21:21:10:43","level":"info","message":"Attaching socket listener on 0.0.0.0:9090"}
{"ts":"2021:03:21:21:10:43","level":"info","message":"Server started on 0.0.0.0:9090"}
{"ts":"2021:03:21:21:17:27","level":"info","message":"Got request for the url: /apis/create-user"}
{"ts":"2021:03:21:21:17:27","level":"info","message":"Looked up service, calling: /home/abc/Desktop/my_project/monkshu/backend/apps/sample/apis/createUser.js"}
{"ts":"2021:03:21:21:17:27","level":"error","message":"[stderr] Trace: MySQL fatal error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client\n    at Protocol.connection._protocol._delegateError (/home/abc/Desktop/my_project/sample/backend/apps/sample/apis/createUser.js:19:17)\n    at Handshake.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:153:12)\n    at Handshake.emit (events.js:198:13)\n    at Handshake.Sequence.end (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/sequences/Sequence.js:78:12)\n    at Handshake.ErrorPacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/sequences/Handshake.js:125:8)\n    at Protocol._parsePacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:291:23)\n    at Parser._parsePacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Parser.js:433:10)\n    at Parser.write (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Parser.js:43:10)\n    at Protocol.write (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:38:16)\n    at Socket.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/Connection.js:88:28)\n (err) => {\n    // This conditional evaluates to true if and only if there was an error\n    // that was not already emitted (which happens when the _write callback\n    // is invoked asynchronously).\n    if (err !== null && !stream._writableState.errorEmitted) {\n      // If there was an error, it will be emitted on `stream` as\n      // an `error` event. Adding a `once` listener will keep that error\n      // from becoming an uncaught exception, but since the handler is\n      // removed after the event, non-console.* writes won't be affected.\n      // we are only adding noop if there is no one else listening for 'error'\n      if (stream.listenerCount('error') === 0) {\n        stream.on('error', noop);\n      }\n    }\n  }"}
{"ts":"2021:03:21:21:17:27","level":"error","message":"Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client\n    at Handshake.Sequence._packetToError (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/sequences/Sequence.js:47:14)\n    at Handshake.ErrorPacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/sequences/Handshake.js:123:18)\n    at Protocol._parsePacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:291:23)\n    at Parser._parsePacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Parser.js:433:10)\n    at Parser.write (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Parser.js:43:10)\n    at Protocol.write (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:38:16)\n    at Socket.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/Connection.js:88:28)\n    at Socket.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/Connection.js:526:10)\n    at Socket.emit (events.js:198:13)\n    at addChunk (_stream_readable.js:288:12)\n    --------------------\n    at Protocol._enqueue (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:144:48)\n    at Protocol.handshake (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:51:23)\n    at Connection.connect (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/Connection.js:116:18)\n    at Object.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/apis/createUser.js:24:12)\n    at Module._compile (internal/modules/cjs/loader.js:778:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)\n    at Module.load (internal/modules/cjs/loader.js:653:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:585:3)\n    at Module.require (internal/modules/cjs/loader.js:692:17)"}
{"ts":"2021:03:21:21:17:27","level":"info","message":"[stdout] EXIT ON CRITICAL ERROR!!! Check Logs.\n (err) => {\n    // This conditional evaluates to true if and only if there was an error\n    // that was not already emitted (which happens when the _write callback\n    // is invoked asynchronously).\n    if (err !== null && !stream._writableState.errorEmitted) {\n      // If there was an error, it will be emitted on `stream` as\n      // an `error` event. Adding a `once` listener will keep that error\n      // from becoming an uncaught exception, but since the handler is\n      // removed after the event, non-console.* writes won't be affected.\n      // we are only adding noop if there is no one else listening for 'error'\n      if (stream.listenerCount('error') === 0) {\n        stream.on('error', noop);\n      }\n    }\n  }"}
{"ts":"2021:03:22:11:40:48","level":"info","message":"*************************************"}
{"ts":"2021:03:22:11:40:48","level":"info","message":"*************************************"}
{"ts":"2021:03:22:11:40:48","level":"info","message":"Logging subsystem initialized."}
{"ts":"2021:03:22:11:40:48","level":"info","message":"Initializing the cluster memory."}
{"ts":"2021:03:22:11:40:48","level":"info","message":"Initializing the apps."}
{"ts":"2021:03:22:11:40:48","level":"info","message":"Initializing the API registry."}
{"ts":"2021:03:22:11:40:48","level":"info","message":"Read API registry: {\"/__org_monkshu__release\":\"/apis/release.js\",\"/__org_monkshu__blackboard\":\"/lib/blackboard.js\"}"}
{"ts":"2021:03:22:11:40:48","level":"info","message":"Read App API registry for app sample: {\n    \"/apis/create-user\": \"/apis/createUser.js?needsToken=false&addsToken=sub:access\"\n}"}
{"ts":"2021:03:22:11:40:48","level":"info","message":"Initializing the distributed blackboard."}
{"ts":"2021:03:22:11:40:48","level":"info","message":"Initializing the global memory."}
{"ts":"2021:03:22:11:40:48","level":"info","message":"Attaching socket listener on 0.0.0.0:9090"}
{"ts":"2021:03:22:11:40:48","level":"info","message":"Server started on 0.0.0.0:9090"}
{"ts":"2021:03:22:11:41:14","level":"info","message":"Got request for the url: /apis/create-user"}
{"ts":"2021:03:22:11:41:14","level":"info","message":"Looked up service, calling: /home/abc/Desktop/my_project/monkshu/backend/apps/sample/apis/createUser.js"}
{"ts":"2021:03:22:11:41:15","level":"error","message":"[stderr] Trace: MySQL fatal error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client\n    at Protocol.connection._protocol._delegateError (/home/abc/Desktop/my_project/sample/backend/apps/sample/apis/createUser.js:19:17)\n    at Handshake.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:153:12)\n    at Handshake.emit (events.js:198:13)\n    at Handshake.Sequence.end (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/sequences/Sequence.js:78:12)\n    at Handshake.ErrorPacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/sequences/Handshake.js:125:8)\n    at Protocol._parsePacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:291:23)\n    at Parser._parsePacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Parser.js:433:10)\n    at Parser.write (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Parser.js:43:10)\n    at Protocol.write (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:38:16)\n    at Socket.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/Connection.js:88:28)\n (err) => {\n    // This conditional evaluates to true if and only if there was an error\n    // that was not already emitted (which happens when the _write callback\n    // is invoked asynchronously).\n    if (err !== null && !stream._writableState.errorEmitted) {\n      // If there was an error, it will be emitted on `stream` as\n      // an `error` event. Adding a `once` listener will keep that error\n      // from becoming an uncaught exception, but since the handler is\n      // removed after the event, non-console.* writes won't be affected.\n      // we are only adding noop if there is no one else listening for 'error'\n      if (stream.listenerCount('error') === 0) {\n        stream.on('error', noop);\n      }\n    }\n  }"}
{"ts":"2021:03:22:11:41:15","level":"error","message":"Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client\n    at Handshake.Sequence._packetToError (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/sequences/Sequence.js:47:14)\n    at Handshake.ErrorPacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/sequences/Handshake.js:123:18)\n    at Protocol._parsePacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:291:23)\n    at Parser._parsePacket (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Parser.js:433:10)\n    at Parser.write (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Parser.js:43:10)\n    at Protocol.write (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:38:16)\n    at Socket.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/Connection.js:88:28)\n    at Socket.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/Connection.js:526:10)\n    at Socket.emit (events.js:198:13)\n    at addChunk (_stream_readable.js:288:12)\n    --------------------\n    at Protocol._enqueue (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:144:48)\n    at Protocol.handshake (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/protocol/Protocol.js:51:23)\n    at Connection.connect (/home/abc/Desktop/my_project/sample/backend/apps/sample/3p/node_modules/mysql/lib/Connection.js:116:18)\n    at Object.<anonymous> (/home/abc/Desktop/my_project/sample/backend/apps/sample/apis/createUser.js:24:12)\n    at Module._compile (internal/modules/cjs/loader.js:778:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)\n    at Module.load (internal/modules/cjs/loader.js:653:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:585:3)\n    at Module.require (internal/modules/cjs/loader.js:692:17)"}
{"ts":"2021:03:22:11:41:15","level":"info","message":"[stdout] EXIT ON CRITICAL ERROR!!! Check Logs.\n (err) => {\n    // This conditional evaluates to true if and only if there was an error\n    // that was not already emitted (which happens when the _write callback\n    // is invoked asynchronously).\n    if (err !== null && !stream._writableState.errorEmitted) {\n      // If there was an error, it will be emitted on `stream` as\n      // an `error` event. Adding a `once` listener will keep that error\n      // from becoming an uncaught exception, but since the handler is\n      // removed after the event, non-console.* writes won't be affected.\n      // we are only adding noop if there is no one else listening for 'error'\n      if (stream.listenerCount('error') === 0) {\n        stream.on('error', noop);\n      }\n    }\n  }"}
{"ts":"2021:03:22:12:10:36","level":"info","message":"*************************************"}
{"ts":"2021:03:22:12:10:36","level":"info","message":"*************************************"}
{"ts":"2021:03:22:12:10:36","level":"info","message":"Logging subsystem initialized."}
{"ts":"2021:03:22:12:10:36","level":"info","message":"Initializing the cluster memory."}
{"ts":"2021:03:22:12:10:36","level":"info","message":"Initializing the apps."}
{"ts":"2021:03:22:12:10:36","level":"info","message":"Initializing the API registry."}
{"ts":"2021:03:22:12:10:36","level":"info","message":"Read API registry: {\"/__org_monkshu__release\":\"/apis/release.js\",\"/__org_monkshu__blackboard\":\"/lib/blackboard.js\"}"}
{"ts":"2021:03:22:12:10:36","level":"info","message":"Read App API registry for app sample: {\n    \"/apis/create-user\": \"/apis/createUser.js?needsToken=false&addsToken=sub:access\"\n}"}
{"ts":"2021:03:22:12:10:36","level":"info","message":"Initializing the distributed blackboard."}
{"ts":"2021:03:22:12:10:36","level":"info","message":"Initializing the global memory."}
{"ts":"2021:03:22:12:10:36","level":"info","message":"Attaching socket listener on 0.0.0.0:9090"}
{"ts":"2021:03:22:12:10:36","level":"info","message":"Server started on 0.0.0.0:9090"}
{"ts":"2021:03:22:12:10:48","level":"info","message":"Got request for the url: /apis/create-user"}
{"ts":"2021:03:22:12:10:48","level":"info","message":"Looked up service, calling: /home/abc/Desktop/my_project/monkshu/backend/apps/sample/apis/createUser.js"}
{"ts":"2021:03:22:12:10:48","level":"info","message":"[console] Connected!"}
{"ts":"2021:03:22:12:10:48","level":"info","message":"[console] User Created ==> false"}
{"ts":"2021:03:22:12:20:55","level":"info","message":"Got request for the url: /apis/create-user"}
{"ts":"2021:03:22:12:20:55","level":"info","message":"Looked up service, calling: /home/abc/Desktop/my_project/monkshu/backend/apps/sample/apis/createUser.js"}
{"ts":"2021:03:22:12:20:55","level":"info","message":"[console] User Created ==> 1"}
{"ts":"2021:03:22:12:21:25","level":"info","message":"Got request for the url: /apis/create-user"}
{"ts":"2021:03:22:12:21:25","level":"info","message":"Looked up service, calling: /home/abc/Desktop/my_project/monkshu/backend/apps/sample/apis/createUser.js"}
{"ts":"2021:03:22:12:21:25","level":"info","message":"[console] User Created ==> 2"}
{"ts":"2021:03:22:13:00:22","level":"info","message":"Got request for the url: /apis/create-user"}
{"ts":"2021:03:22:13:00:22","level":"info","message":"Looked up service, calling: /home/abc/Desktop/my_project/monkshu/backend/apps/sample/apis/createUser.js"}
{"ts":"2021:03:22:13:00:23","level":"info","message":"[console] User Created ==> 3"}
{"ts":"2021:03:23:10:40:57","level":"info","message":"*************************************"}
{"ts":"2021:03:23:10:40:57","level":"info","message":"*************************************"}
{"ts":"2021:03:23:10:40:57","level":"info","message":"Logging subsystem initialized."}
{"ts":"2021:03:23:10:40:57","level":"info","message":"Initializing the cluster memory."}
{"ts":"2021:03:23:10:40:57","level":"info","message":"Initializing the apps."}
{"ts":"2021:03:23:10:40:57","level":"info","message":"Initializing the API registry."}
{"ts":"2021:03:23:10:40:57","level":"info","message":"Read API registry: {\"/__org_monkshu__release\":\"/apis/release.js\",\"/__org_monkshu__blackboard\":\"/lib/blackboard.js\"}"}
{"ts":"2021:03:23:10:40:57","level":"info","message":"Initializing the distributed blackboard."}
{"ts":"2021:03:23:10:40:57","level":"info","message":"Read App API registry for app sample: {\n    \"/apis/create-user\": \"/apis/createUser.js?needsToken=false&addsToken=sub:access\"\n}"}
{"ts":"2021:03:23:10:40:57","level":"info","message":"Initializing the global memory."}
{"ts":"2021:03:23:10:40:57","level":"info","message":"Attaching socket listener on 0.0.0.0:9090"}
{"ts":"2021:03:23:10:40:57","level":"info","message":"Server started on 0.0.0.0:9090"}
{"ts":"2021:03:23:10:42:13","level":"info","message":"Got request for the url: /apis/create-user"}
{"ts":"2021:03:23:10:42:13","level":"info","message":"Looked up service, calling: /home/abc/Desktop/my_project/monkshu/backend/apps/sample/apis/createUser.js"}
{"ts":"2021:03:23:10:42:14","level":"info","message":"[console] Connected!"}
{"ts":"2021:03:23:10:42:14","level":"info","message":"[console] User Created ==> 4"}
{"ts":"2021:03:23:11:00:25","level":"info","message":"Got request for the url: /apis/create-user"}
{"ts":"2021:03:23:11:00:25","level":"info","message":"Looked up service, calling: /home/abc/Desktop/my_project/monkshu/backend/apps/sample/apis/createUser.js"}
{"ts":"2021:03:23:11:00:25","level":"info","message":"[console] User Created ==> 5"}
